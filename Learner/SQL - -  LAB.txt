PROG 1


---CREATE TABLE FOR DATABASE --------------------------------------
CREATE TABLE BRANCH(
BRANCH_ID VARCHAR(20),
BANK_NAME VARCHAR(20),
BRANCH_NAME VARCHAR(20),
ASSETS VARCHAR(20),
PRIMARY KEY(BRANCH_ID)
);


CREATE TABLE CUSTOMER(
CUSTOMER_ID VARCHAR(20),
CUSTOMER_NAME VARCHAR(20),
CUSTOMER_AGE INT,
CUSTOMER_ADDRESS VARCHAR(20),
CUSTOMER_PHONE INT,
PRIMARY KEY(CUSTOMER_ID)
);


CREATE TABLE ACCOUNT(
ACCOUNT_NO VARCHAR(20),
BRANCH_ID VARCHAR(20),
ACCOUNT_TYPE VARCHAR(20),
ACCOUNT_BALANCE INT,
CUSTOMER_ID VARCHAR(20),
PRIMARY KEY(BRANCH_ID,CUSTOMER_ID),
FOREIGN KEY(BRANCH_ID) REFERENCES BRANCH(BRANCH_ID) ON DELETE CASCADE,
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE

);


CREATE TABLE LOAN(
LOAN_NUMBER VARCHAR(20),
BRANCH_ID VARCHAR(20),
AMOUNT INT,
CUSTOMER_ID VARCHAR(20),
PRIMARY KEY(BRANCH_ID,LOAN_NUMBER),
FOREIGN KEY(BRANCH_ID) REFERENCES BRANCH(BRANCH_ID) ON DELETE CASCADE,
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE
);

----INSERT VALUES ----------------------------------------------------------

1
INSERT INTO BRANCH VALUES('B1','BARKUR','CANARA','22');

INSERT INTO BRANCH VALUES('B2','UDUPI','SYNDICATE','33');

INSERT INTO BRANCH VALUES('B3','MANGALORE','HDFC','44');

INSERT INTO BRANCH VALUES('B4','KUNDAPURA','CANARA','55');

INSERT INTO BRANCH VALUES('B5','HERADI','CANARA','55');


2. INSERT INTO CUSTOMER VALUES('C1','DISHA',22,'UDUPI',123);
INSERT INTO CUSTOMER VALUES('C2','ADITHYA',25,'BARKUR',456);
INSERT INTO CUSTOMER VALUES('C3','TRUPTHI',20,'MANGALORE',789);
INSERT INTO CUSTOMER VALUES('C4','SACHIN',24,'UDUPI',466);
INSERT INTO CUSTOMER VALUES('C5','SHREYA',22,'HERADI',789);


3.

INSERT INTO ACCOUNT VALUES('A1','B1','SAVINGS',457687,'C1');
INSERT INTO ACCOUNT VALUES('A2','B2','CURRENT',766567,'C2');
INSERT INTO ACCOUNT VALUES('A3','B3','SAVINGS',76878,'C3');
INSERT INTO ACCOUNT VALUES('A4','B4','CURRENT',86788,'C4');
INSERT INTO ACCOUNT VALUES('A5','B5','SAVINGS',457,'C5');

4.  

INSERT INTO LOAN VALUES('L1','B1',348788,'C1');
INSERT INTO LOAN VALUES('L2','B2',776893,'C2');
INSERT INTO LOAN VALUES('L3','B3',87653,'C3');
INSERT INTO LOAN VALUES('L4','B4',87674,'C4');
INSERT INTO LOAN VALUES('L5','B5',746833,'C5');


---------------------------------------------------------

SELECT * FROM BRANCH;
SELECT * FROM ACCOUNT;
SELECT * FROM CUSTOMER;
SELECT * FROM LOAN;

-----------------------------------------------------------------
QUERIES

1.
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME
FROM CUSTOMER C , ACCOUNT A, BRANCH B
WHERE C.CUSTOMER_ID=A.CUSTOMER_ID  AND
                A.BRANCH_ID = B.BRANCH_ID AND
                B.BRANCH_NAME = 'CANARA';

--------------------------------------------------
3.

SELECT C.CUSTOMER_NAME
FROM CUSTOMER C, ACCOUNT A
WHERE C.CUSTOMER_ID = A.CUSTOMER_ID AND
A.ACCOUNT_BALANCE < 500;

------------------------------------------------------
4.

SELECT C.CUSTOMER_NAME, L.LOAN_NUMBER,L.AMOUNT
FROM CUSTOMER C, LOAN L
WHERE C.CUSTOMER_ID= L.CUSTOMER_ID AND
               L.AMOUNT<87670;
------------------------------------------------------------
D.

(SELECT BRANCH_NAME, BRANCH_ID
FROM BRANCH B
WHERE B.ASSETS = 
(
SELECT MAX(ASSETS)
FROM BRANCH B
))
UNION 
(SELECT BRANCH_NAME, BRANCH_ID
FROM BRANCH B
WHERE B.ASSETS =
(
SELECT MIN(ASSETS)
FROM BRANCH B
));

----------------------------------------------------------------------

2.
SELECT CUSTOMER_NAME
FROM CUSTOMER
WHERE CUSTOMER_ID IN (
SELECT CUSTOMER_ID
FROM ACCOUNT
WHERE ACCOUNT_BALANCE = (
SELECT MAX(ACCOUNT_BALANCE)
FROM ACCOUNT
)
);


---------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

PROG 2

CREATE TABLE

CREATE TABLE STUDENT (
USN VARCHAR (20),
SNAME VARCHAR (15),
ADDRESS VARCHAR (20),
PHONE VARCHAR (10),
GENDER VARCHAR (6),
PRIMARY KEY (USN));

CREATE TABLE SEMSEC (
SSID VARCHAR (20),
SEM INT,
SEC VARCHAR (3),
PRIMARY KEY (SSID));

CREATE TABLE CLASS (
USN VARCHAR (20),
SSID VARCHAR (20),
PRIMARY KEY (USN, SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN)
ON DELETE CASCADE,
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID)
ON DELETE CASCADE);

CREATE TABLE COURSE (
SUBCODE VARCHAR (15),
TITLE CHAR (20),
SEM INT,
CREDITS INT,
PRIMARY KEY (SUBCODE));

CREATE TABLE IAMARKS (
USN VARCHAR (20),
SUBCODE VARCHAR (15),
SSID VARCHAR (20),
TEST1 INT,
TEST2 INT,
TEST3 INT,
FINALIA INT,
PRIMARY KEY (USN, SUBCODE, SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN)
ON DELETE CASCADE,
FOREIGN KEY (SUBCODE) REFERENCES COURSE (SUBCODE)
ON DELETE CASCADE,
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID)
ON DELETE CASCADE);

-------------------------------------------------------------------------------------
INSERTING

INSERT INTO STUDENT VALUES('U1','DISHA','UDUPI',1234,'F');
INSERT INTO STUDENT VALUES('U2','SHREYA','MANGALORE',1234,'M');
INSERT INTO STUDENT VALUES('U3','ADITHYA','UDUPI',1234,'F');
INSERT INTO STUDENT VALUES('U4','BHOOMI','BARKUR',1234,'F');
INSERT INTO STUDENT VALUES('U5','TRUPTHI','UDUPI',1234,'F');


INSERT INTO SEMSEC VALUES('S1','3','B');
INSERT INTO SEMSEC VALUES('S2','5','C');
INSERT INTO SEMSEC VALUES('S3','3','A');
INSERT INTO SEMSEC VALUES('S4','5','B');
INSERT INTO SEMSEC VALUES('S5','4','C');


INSERT INTO CLASS VALUES('U1','S1');
INSERT INTO CLASS VALUES('U2','S2');
INSERT INTO CLASS VALUES('U3','S3');
INSERT INTO CLASS VALUES('U4','S4');
INSERT INTO CLASS VALUES('U5','S5');


INSERT INTO COURSE VALUES('SUB1','AI',3,4);

INSERT INTO COURSE VALUES('SUB2','WEB DEV',5,2);

INSERT INTO COURSE VALUES('SUB3','ML DEV',3,3);

INSERT INTO COURSE VALUES('SUB4','AI',5,5);

INSERT INTO COURSE VALUES('SUB5','WEB DEV',3,3);

INSERT INTO IAMARKS VALUES('U1','SUB1','S1',30,25,26,NULL);
INSERT INTO IAMARKS VALUES('U2','SUB2','S2',10,25,26,NULL);
INSERT INTO IAMARKS VALUES('U3','SUB3','S3',30,28,26,NULL);
INSERT INTO IAMARKS VALUES('U4','SUB4','S4',30,25,2,NULL);
INSERT INTO IAMARKS VALUES('U5','SUB5','S5',20,25,16,NULL);

1.
SELECT A.*,B.SEM,B.SEC
FROM STUDENT A,SEMSEC B,CLASS C
WHERE A.USN= C.USN AND B.SSID=C.SSID AND B.SEM= 3 AND B.SEC = 'B';


2.
SELECT S.SEM,S.SEC ,COUNT(CASE WHEN A.GENDER = 'M' THEN S.SSID END) AS MALECOUNT, COUNT(CASE WHEN A.GENDER = 'F' THEN S.SSID END) AS FEMALECOUNT
FROM STUDENT A,SEMSEC S, CLASS C
WHERE A.USN = C.USN AND S.SSID = C.SSID
GROUP BY S.SEM, S.SEC;

3.
CREATE VIEW TEST2_MARKS
AS
SELECT SUBCODE , TEST1 ,TEST2,TEST3
FROM IAMARKS
WHERE USN = 'U1';
SELECT * FROM TEST2_MARKS;

4.
UPDATE IAMARKS 
SET FINALIA = (TEST1+TEST2+TEST3)/3;

5.

SELECT S.*, IA.FINALIA,
(CASE
WHEN IA.FINALIA BETWEEN 45 AND 50 THEN 'OUTSTANDING'
WHEN IA.FINALIA BETWEEN 40 AND 44 THEN 'GOOD'
WHEN IA.FINALIA BETWEEN 30 AND 39 THEN 'AVERAGE'
ELSE 'WEAK' END) AS CAT FROM STUDENT S, SEMSEC SS, IAMARKS IA
WHERE S.USN=IA.USN AND SS.SSID=IA.SSID AND SS.SEM=5;


---------------------------------------------------------------------------------------------------
PROG 5

STEP 1: CREATE CUSTOMER TABLE

CREATE TABLE CUSTOMERSS (
    ID VARCHAR(20),
    NAME VARCHAR(50),
    AGE INT,
    ADDRESS VARCHAR(20),
    SALARY INT,
    PRIMARY KEY(ID)
);

STEP 2: ANOTHER TABLE FOR SALARY CHANGE LOG

CREATE TABLE SALARY_CHANGE (
    ID INT,
CUSTOMER_ID INT,
    OLD_SAL INT,
NEW_SAL INT,
SAL_DIF INT,
PRIMARY KEY(ID)
);

STEP 3:

DELIMITER $$

CREATE TRIGGER DISPLAY_SAL
BEFORE UPDATE ON CUSTOMERSS
FOR EACH ROW
BEGIN 
DECLARE DIFF_SAL INT;
SET DIFF_SAL = NEW.SALARY - OLD.SALARY;

INSERT INTO SALARY_CHANGE(ID,CUSTOMER_ID,OLD_SAL,NEW_SAL,SAL_DIFF) VALUES(OLD.ID, OLD.SALARY, NEW.SALARY, DIFF_SAL);
END$$

STEP 4:
DELIMITER;

STEP 5:
INSERT INTO CUSTOMERSS VALUES('1','DISHA',23,'BARKUR',5000);


STEP 6: MAKE UPDATE

UPDATE CUSTOMERSS
SET SALARY = 6000
WHERE ID = 1;

STEP 7:
SELECT * FROM SALARY_CHANGE;

---------------------------------------------------------------------------------------------------------------------------
PROG 6
 STEP 1:

CREATE A TABLE NAMED EMPLOYEE AND INSERT VALUES
CREATE TABLE Employee (
    E_id INT PRIMARY KEY,
    E_name VARCHAR(50),
    Age INT,
    Salary INT
);

INSERT INTO Employee (E_id, E_name, Age, Salary) 
VALUES 
(1, 'John Doe', 30, 5000),
(2, 'Jane Smith', 28, 6000),
(3, 'Michael Brown', 35, 5500),
(4, 'Emily Davis', 40, 5800),
(5, 'David Wilson', 25, 4500);


STEP 2:

DECLARE

    var_record Employee%ROWTYPE;
    

    CURSOR emp_cursor IS
        SELECT * FROM Employee WHERE Salary < 6000;
BEGIN

    OPEN emp_cursor;


    LOOP
        FETCH emp_cursor INTO var_record;  -- Store the fetched data into the variable
        

        EXIT WHEN emp_cursor%NOTFOUND;
        

        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || var_record.E_name || ', Salary: ' || var_record.Salary);
    END LOOP;


    CLOSE emp_cursor;
END;



END;


---------------------------------------------------------------------------------------------------
PROG 3

CREATE TABLE DEPARTMENTS
(
DNUM VARCHAR(4),
DNAME VARCHAR(20),
MGR_SSN VARCHAR(10),
MGR_START_DATE DATE,
PRIMARY KEY(DNUM)
);

CREATE TABLE EMPLOYEESS
(
EID VARCHAR(10),
NAME VARCHAR(20),
ADDRESS VARCHAR(20),
GEN CHAR(1),
SALARY DECIMAL(10,3),
SUPER_EID VARCHAR(10),
DNO INT,
PRIMARY KEY(EID),
FOREIGN KEY(SUPER_EID) REFERENCES EMPLOYEE(EID) ON DELETE
CASCADE,
FOREIGN KEY(DNO) REFERENCES DEPARTMENT(DNUM) ON DELETE CASCADE
);

CREATE TABLE DLOCATION
(
DNO INT,
DLOC VARCHAR(20),
PRIMARY KEY(DNO,DLOC),
FOREIGN KEY(DNO) REFERENCES DEPARTMENT(DNUM) ON DELETE CASCADE
);

CREATE TABLE PROJECT
(
PNUM INT,
PNAME VARCHAR(20),
PLOCATION VARCHAR(20),
DNO INT,
PRIMARY KEY(PNUM),
FOREIGN KEY(DNO) REFERENCES DEPARTMENT(DNUM) ON DELETE CASCADE
);

CREATE TABLE WORKS_ON
(
EID VARCHAR(20),
PNO INT,
HOURS INT,
PRIMARY KEY(EID,PNO),
FOREIGN KEY(EID) REFERENCES EMPLOYEE(EID) ON DELETE CASCADE,
FOREIGN KEY(PNO) REFERENCES PROJECT(PNUM) ON DELETE CASCADE
);


-----------------------------------------------------------------
prog 5

step 1:
CREATE TABLE CUSTOMERS (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100),
    AGE NUMBER,
    ADDRESS VARCHAR2(255),
    SALARY NUMBER
);

CREATE OR REPLACE TRIGGER display_salary_changes
BEFORE DELETE OR INSERT OR UPDATE ON customers
FOR EACH ROW
DECLARE
    sal_diff NUMBER;
BEGIN
    -- If it's an UPDATE operation, calculate salary difference
    IF UPDATING THEN
        sal_diff := :NEW.salary - :OLD.salary;  -- Calculate salary difference
        dbms_output.put_line('Old salary: ' || :OLD.salary);  -- Old salary
        dbms_output.put_line('New salary: ' || :NEW.salary);  -- New salary
        dbms_output.put_line('Salary difference: ' || sal_diff);  -- Display difference
    ELSIF DELETING THEN  -- If it's a DELETE operation
        dbms_output.put_line('Deleted salary: ' || :OLD.salary);  -- Display old salary (salary being deleted)
    ELSIF INSERTING THEN  -- If it's an INSERT operation
        dbms_output.put_line('Inserted salary: ' || :NEW.salary);  -- Display new salary (salary being inserted)
    END IF;
END;
/

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (7, 'ABC', 22, 'Adyar', 7500.00);

UPDATE CUSTOMERS SET SALARY = 8000 WHERE ID = 7;

DELETE FROM CUSTOMERS WHERE ID = 7;

o/p: 

Inserted salary: 7500.00

For UPDATE:
Old salary: 7500.00
New salary: 8000.00
Salary difference: 500.00

For DELETE:
Deleted salary: 8000.00

-------------------------------------------

PROG 6:

-- Step 1: Create the employee table
CREATE TABLE employee (
    E_id NUMBER PRIMARY KEY,
    E_name VARCHAR2(100),
    Salary NUMBER
);

-- Step 2: Insert some sample records into the employee table
INSERT INTO employee (E_id, E_name, Salary) VALUES (1, 'John Doe', 5000);
INSERT INTO employee (E_id, E_name, Salary) VALUES (2, 'Jane Smith', 6000);
INSERT INTO employee (E_id, E_name, Salary) VALUES (3, 'Alice Brown', 4500);

-- Step 3: Declare the cursor and fetch data
DECLARE
    var_record employee%ROWTYPE;
    CURSOR cur_test (max_sal NUMBER) IS
        SELECT * FROM employee WHERE salary < max_sal;
BEGIN
    OPEN cur_test(5800);
    LOOP
        FETCH cur_test INTO var_record;
        EXIT WHEN cur_test%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Name: ' || var_record.E_name || ' Salary: ' || var_record.Salary);
    END LOOP;
    CLOSE cur_test;
END;
/
