REST API?

user ----> send request -----> client side(react)--->backend(server side - REST API)(node js+express) ----> database server
user<-----response(HTML)<-----client side<----------response(json) API<------------------------------------------database

REST - representational state transfer is an architectural style for debugging n.w application
RESTful api is a server that follow set of REST principles or guildlines
-------------------------------------------------------------------------------------------------------------------------------------------------------

REST API VS SOAP API?

REST API - representational state transfer 
architecture style
uses HTTP OR HTTPS
use lightweight formats json,xml
relies on http status code
lightweight and faster

SOAP API - simple object access protocol
various protocols- http,https..smtp etc 
stateless
desfines its own fault
can be slower
uses only xml
-------------------------------------------------------------------------------------------------------------------------------------
HTTP verbs and HTTP methods?
user ---> send request to cleint ----> client side /frontend ---> HTTP verbs/methods --->API/BACKEND ----> database server

HTTP methods/Verbs 
get - retriive all the data from a specific resourcse, request body is empty, headers are optional
post -submit the data to be processed, that is sent through the request body
put - update a resource or create a new resource if it doesnt exists
patch 
delete- request removal of a rousouce
--------------------------------------------------------------------------------------------------------------------------------------
Diff bw put and patch?
both used to update a resource with a new data
put request only entire feild of a body
Full update
ex:
{
    "id":123,
    "name":"john",
    "email":"dishashetty546@gmail.com",
    "age":34
}

patch request only a part which need to updated is passed in the reqest body 
Partial update
ex:
{
    "email":"gjhh",
    "password":"yui"
}

-------------------------------------------------------------------------------------------------------------------------------------------
idempotence in RESTFUL API?

get : www.abc.com/userSchema
if we send this req 100 times
will return the same response/result/output

Non-idempotent in RESTFUL API?
post : www.abc.com/userSchema
will have diff response every time

-----------------------------------------------------------------------------------------------------------------------------------------

Status codess in RESTFUL API?

to convey the results in client requests
1xx(info) 
-100 continue

2xx(success)
-200 ok
-201 created
-202 accepted
-204 no content

3xx(Redirection)
-300 multiple choice

4xx(client error)
-400 bad requests
-401 unauthorized
-403 forbidden
-404 not found

5xx(server Error)
-500 internal server error
-501 not implemented
-502 bad gateway
-503 service unavailable
------------------------------------------------------------------------------------------------------------------------------------------
What is CORS in RESTFUL API?
CORS - cross origin resource sharing
http://intervirwhappy/index.html 

security feature  implemented in web browser that restricts web pages or scripts from making requests t a different domains that the one that served the web pages

-------------------------------------------------------------------------------------------------------------------------------------------
Versionaing in RESTFUL api's?
ex: if we are changing the versions of API ,version 1, version 2, version 3
but clients are not ready to accept this because of shortage of resources or they are not yet upadated

there comes a picture of Versionaing
practice of mainitaining multiple versions of the API to support backward compatibility
---------------------------------------------------------------------------------------------------------------------------------------------
Token based or JWT authentication In js?
most popular type of authentication used
JWT - json web Token - which generates tokens

frontend/client-side----------post(username,password)---> nodeJS(REST API) Authentication and create JWT token 

   client <------------------return the response(JWT token)-------------------- server

   client------------------request data(JWT token;header)----------------------> Server  (validates the token signature)

   client <--------------------send data-------------------------------------- server
(display data in browser)
-------------------------------------------------------------------------------------------------------------------------------------------
JWT?
they are used with security constarints bw client and the server they are often used for authenticarina nd authorization scenerios
jwt is a string consisting of 3 major parts
---------------------------------------------------------------------------------------------------------------------------------------------------
